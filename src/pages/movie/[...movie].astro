---

  import Layout from "@/layouts/Layout.astro";
  import {type MovieIDSelect} from '@/types/dataIdMovieSelect'
  import { Image } from "astro:assets";

  import ItemMovieSelect from '@/components/astro/ItemMovieSelect.astro'
  import type { Movies, Result } from "@/types/dataMovie";
  
  const {movie} = Astro.params

  let idMovie: number
  let title
  let data
  let URL_IMG: string
  let pathImgPreview
  let path: (string | undefined)
  let movies: Result[]

  let backdrop_path: string

  
  const API_KEY = import.meta.env.SECRET_API_KEY
  const ACCESS_TOKEN = import.meta.env.SECRET_TOKEN_ACCESS


  if (movie) {
    const [id, name] = movie?.split("/") 
    idMovie = parseInt(id)
    title = name;

    const URL_MOVIE_DETAILS = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&append_to_response=videos&language=es`

    // La utilizamos para que nos devuelva el Path de la imagen real
    const URL_NOW_PLAYING = `https://api.themoviedb.org/3/movie/now_playing?api_key=${API_KEY}language=es&page=1`
    const URL_MOVIES_POPULARITY = `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}language=es&page=2`
    const URL_MOVIES_BEST_RATE = `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}language=es&page=3`
    
    URL_IMG = `https://image.tmdb.org/t/p/original`
  
    const options = {
      method: 'GET',
      headers: {
        accept: 'application/json',
        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxZjhmOTllNmM0MjZjNzg5ODZiMThhOTQ3ZjllN2MyMyIsInN1YiI6IjY1NGViMzQ4NjdiNjEzMDBhZmNhNTAwNSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.sukqcUtUHVZ7GTSoPmYEX1MEa5Voqqv-WvLM5O5tTYE'
      }
    };

    const response = await fetch(URL_MOVIE_DETAILS, options)

    const movie_details = await response.json() as MovieIDSelect

    
    const [now_playing, popularity, best_rate] = await Promise.all(
      [fetch(URL_NOW_PLAYING, options),fetch(URL_MOVIES_POPULARITY, options),fetch(URL_MOVIES_BEST_RATE, options)
    ])

    const movies_now = await now_playing.json() as Movies
    const movies_popularity = await popularity.json() as Movies
    const movies_best_rate = await best_rate.json() as Movies

    const now_render = movies_now.results.splice(0,5)
    const popularity_render = movies_popularity.results.splice(0,5)
    const rate_render = movies_best_rate.results.splice(0,5)
    
    movies = [...now_render,...popularity_render, ...rate_render]

    // const response_now = await response_now_playing.json() as Movies

    pathImgPreview = movies.find(movie => movie?.id === idMovie) 

    path = pathImgPreview?.poster_path
 
    data = movie_details

    backdrop_path = (movie_details.belongs_to_collection) ? movie_details.belongs_to_collection.backdrop_path : movie_details.backdrop_path


  }



  


---

<Layout title={`Cripop | ${title}`}>
  <main class="relative h-screen">
    <ItemMovieSelect
      title={data?.title}
      genres={data?.genres}
      language={data?.spoken_languages}
      overview={data?.overview}
      poster_img={URL_IMG + path}
      production_companies={data?.production_companies}
      date={data?.release_date}
      duration={data?.runtime}
      tagline={data?.tagline}
      video={data?.videos.results}
      rate={data?.vote_average}
  
    />
    <div id={idMovie} class="absolute w-full h-96 xl:h-full">
      <Image
      class={"absolute max-w-full h-full object-cover object-center"}
      src={URL_IMG + backdrop_path}
      alt={title}
      width={3600}
      height={2160}
      quality="high"
      />
      <div class="absolute inset-0 bg-gradient-to-t from-black"></div>
      <div class="absolute inset-0 bg-black/50"></div>
    </div>
  </main>
</Layout>