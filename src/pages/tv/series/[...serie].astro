---
import Layout from '@/layouts/Layout.astro'
import type { DetailsSeries } from '@/types/details-serie'
import type { DetailsSeriesSeasons } from '@/types/database.types'
import type { Videos } from '@/types/videos'
import { tmdbUrls } from '@/services/tmdb/urls'
import axiosClient from '@/lib/axios/client'
import MediaDetails from '@/components/astro/media-details.astro'

const { serie } = Astro.params

if (!serie) return Astro.redirect('/404')

const [id, nameUrl] = serie.split('/')

const URL_SERIE_DETAILS = tmdbUrls.detailsWithVideos('tv', parseInt(id))
const URL_SERIE_VIDEOS = tmdbUrls.videos.all('tv', parseInt(id))
const [detailSerie, detailSerieVideos] = await Promise.all([
  axiosClient.get<DetailsSeries>(URL_SERIE_DETAILS),
  axiosClient.get<Videos>(URL_SERIE_VIDEOS),
])

if (!detailSerie.success || !detailSerieVideos.success) return Astro.redirect('/404')

const { data: dataSerie } = detailSerie
const { data: dataSerieVideos } = detailSerieVideos

const detailsSerie: Omit<DetailsSeriesSeasons, 'currentSeason'> = {
  ...dataSerie,
  runtime: dataSerie.episode_run_time[0] * dataSerie.number_of_episodes,
  videos: dataSerieVideos,
}

const name = `${detailsSerie.name} ${`(${new Date(detailsSerie.first_air_date).getFullYear()} - ${new Date(detailsSerie.last_air_date).getFullYear()}) | ${detailsSerie.seasons.length} temporadas`}`
---

<Layout
  title={`${name} - Cripop`}
  description={`${detailsSerie.overview}`}
  og={{
    url: `/tv/series/${id}/${nameUrl}`,
    image: `${tmdbUrls.images.original}${detailsSerie.backdrop_path}`,
  }}
>
  <MediaDetails data={detailsSerie} type="tv" />
</Layout>
