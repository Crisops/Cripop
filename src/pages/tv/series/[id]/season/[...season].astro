---
import Layout from '@/layouts/Layout.astro'
import type { DetailsSeriesSeasons } from '@/types/database.types'
import type { DetailsSeries } from '@/types/details-serie'
import type { DetailsSeason } from '@/types/data-season'
import type { Videos } from '@/types/videos'
import { tmdbUrls } from '@/services/tmdb/urls'
import axiosClient from '@/lib/axios/client'
import MediaDetails from '@/components/astro/media-details.astro'

const { id, season } = Astro.params
const [seasonNumber, _, episodeNumber, nameUrl] = season?.split('/') ?? []

if (!id || !seasonNumber || !episodeNumber) return Astro.redirect('/404')

const URL_SERIE_DETAILS = tmdbUrls.detailsWithVideos('tv', parseInt(id))
const URL_SEASON_DETAILS = tmdbUrls.detailsSeason('tv', parseInt(id), parseInt(seasonNumber))
const URL_EPISODE_VIDEOS = tmdbUrls.videos.season.episodes(
  'tv',
  parseInt(id),
  parseInt(seasonNumber),
  parseInt(episodeNumber),
)

const [detailSerie, detailSeason, detailEpisodeVideos] = await Promise.all([
  axiosClient.get<DetailsSeries>(URL_SERIE_DETAILS),
  axiosClient.get<DetailsSeason>(URL_SEASON_DETAILS),
  axiosClient.get<Videos>(URL_EPISODE_VIDEOS),
])

if (!detailSerie.success || !detailSeason.success || !detailEpisodeVideos.success) return Astro.redirect('/404')

const { data: dataSerie } = detailSerie
const { data: dataSeason } = detailSeason
const { data: dataEpisodeVideos } = detailEpisodeVideos

const dataEpisode =
  dataSeason.episodes.find((episode) => episode.episode_number === parseInt(episodeNumber)) ?? dataSeason.episodes[0]

const detailsSerieSeason: DetailsSeriesSeasons = {
  ...dataSerie,
  name: dataEpisode.name,
  overview: dataEpisode.overview,
  first_air_date: dataEpisode.air_date,
  currentSeason: { ...dataSeason, episode: dataEpisode },
  videos: dataEpisodeVideos,
  vote_average: dataEpisode.vote_average,
  runtime: dataEpisode.runtime,
}

const name = `${dataSerie.name}: Temporada ${dataSeason.season_number} (${new Date(dataEpisode.air_date).getFullYear()}): Episodio ${dataEpisode.episode_number} - ${dataEpisode.name}`
---

<Layout
  title={`${name}`}
  description={`${detailsSerieSeason.overview}`}
  og={{
    url: `/tv/series/${id}/season/${seasonNumber}/episode/${episodeNumber}/${nameUrl}`,
    image: `${tmdbUrls.images.original}${detailsSerieSeason.backdrop_path}`,
  }}
>
  <MediaDetails data={detailsSerieSeason} type="tv" isSeason />
</Layout>
