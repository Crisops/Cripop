---
  import { getResultSearch } from '@/services/get_search'
  import { getGendersMoviesList, getGendersSeriesList } from '@/services/get_genders'
  import type { Genders, MovieWithGenders } from '@/types/Genders'
  import { getGendersMovies, getGendersSeries } from '@/services/get_genders_list'
  import { getPosterPath } from '@/services/get_poster_img'
  import type { Movies } from '@/types/dataMovie'
  import type { SearchSeries } from '@/types/dataSearchSeries'
  import ShowMovie from './ShowMovie.astro'
import NotFoundMovieOrSerie from './NotFoundMovieOrSerie.astro'


  interface Props {
    url: string
    choose: string | null
  }

  const { choose, url } = Astro.props


  const ACCESS_TOKEN = import.meta.env.SECRET_TOKEN_ACCESS;

  let resultSearchMovies: Movies | undefined;
  let resultSearchSeries: SearchSeries | undefined;

  let data: Movies | SearchSeries

  let listIdWithGender: MovieWithGenders


  if (choose === "movie") {
  resultSearchMovies = await getResultSearch(ACCESS_TOKEN, url) as Movies
  data = resultSearchMovies
  const gendersList = await getGendersMoviesList(ACCESS_TOKEN) as Genders
  const movie_gendersId = resultSearchMovies.results.map(search => search.genre_ids)
  listIdWithGender = await getGendersMovies(movie_gendersId, gendersList) as MovieWithGenders;
  }else{
  resultSearchSeries = await getResultSearch(ACCESS_TOKEN, url) as SearchSeries
  data = resultSearchSeries
  const gendersList = await getGendersSeriesList(ACCESS_TOKEN) as Genders
  const movie_gendersId = resultSearchSeries.results.map(search => search.genre_ids)
  listIdWithGender = await getGendersSeries(movie_gendersId, gendersList) as MovieWithGenders;
  }
  
  const img = await Promise.all(data.results.map((search) => getPosterPath(ACCESS_TOKEN, search.id, choose)));

  let resultsSearch

  if (choose === "movie") {
    resultsSearch = resultSearchMovies?.total_results
  }else{
    resultsSearch = resultSearchSeries?.total_results
  }  

---

<div id="containerMovies" class="relative h-full mt-10">
  <div class:list={[
    "px-5 md:px-10 pb-20",
    {
      "grid place-items-center grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-5": resultsSearch,
      "block": !resultsSearch
    }

  ]}>
    {
      resultsSearch ?
      choose === "movie"
      ?
      resultSearchMovies?.results.map((movie, index) =>(
        <ShowMovie
          id={movie.id}
          url_image={img[index]?.file_path ?? ""}
          title={movie.title}
          widht={500}
          height={700}
          genders={listIdWithGender}
          rate={movie.vote_average}
          index={index}
          url='movie'
        />
      ))
      :
      resultSearchSeries?.results.map((movie, index) =>(
        <ShowMovie
          id={movie.id}
          url_image={img[index]?.file_path ?? ""}
          name={movie.name}
          widht={500}
          height={700}
          genders={listIdWithGender}
          rate={movie.vote_average}
          index={index}
          url='tv'
        />
      ))
      :
      <NotFoundMovieOrSerie/>
    }
  </div>
</div>

<style>
  
  #containerMovies::-webkit-scrollbar{
    width: 5px;
  }

  #containerMovies::-webkit-scrollbar-thumb{
    background-color: #003B07;
    border-radius: 10px;
  }

  #containerMovies::-webkit-scrollbar-track{
    background-color: #000105;
  }

</style>