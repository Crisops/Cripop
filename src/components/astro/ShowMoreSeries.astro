---
  import type { TvSeriesTop } from "@/types/dataTvSeriesTop"
  import { getGendersSeriesList } from "@/services/get_genders"
  import { getGendersSeries} from "@/services/get_genders_list"
  import type {Genders, MovieWithGenders } from "@/types/Genders"
  import { getPosterPath } from "@/services/get_poster_img"
  import Filters from "../react/Filters"
  import Footer from "./Footer.astro"
  import ShowMovie from "./ShowMovie.astro"
import type {  ResultErrorFilters, ResultFiltersSerie } from "@/types/dataFilters"
import type { Backdrop } from "@/types/imagesMovies"

  interface Props {
    url: string,
    title: string
    choose: string
  }

  const { url, title, choose } = Astro.props

  const ACCESS_TOKEN = import.meta.env.SECRET_TOKEN_ACCESS

  const options = {
    method: 'GET',
    headers: {
      accept: 'application/json',
      Authorization: `Bearer ${ACCESS_TOKEN}`
    }
  }

  let resultFilters: ResultFiltersSerie | undefined
  let imgMovieFilter: Backdrop[]
  let listGenders: MovieWithGenders
  let errorRequest: ResultErrorFilters | undefined

  if (Astro.request.method === "GET") {
    try {
      const data = Astro.url.searchParams;
      const rate = data.get("vote_average.gte");
      const sort = data.get("sort_by");
      const genre = data.get("with_genres");
      const viewUser = data.get("choose");
      
      const URL_DISCOVER = `https://api.themoviedb.org/3/discover/${viewUser}?include_adult=false&include_video=true&language=es&page=1&sort_by=${sort}&vote_average.gte=${rate}&with_genres=${genre}`

      const response = await fetch(URL_DISCOVER, options)

      if (!response.ok) {
        throw {statusCode: response.status, statusMessage: response.statusText}
      }


      resultFilters = await response.json() as ResultFiltersSerie
      

      const series_gendersId = resultFilters.results.map(movie => movie.genre_ids)

      const gendersList = await getGendersSeriesList(ACCESS_TOKEN) as Genders

      listGenders = await getGendersSeries(series_gendersId, gendersList) as MovieWithGenders

      imgMovieFilter = await Promise.all(resultFilters.results.map((result) => getPosterPath(ACCESS_TOKEN, result.id, "tv"))) as Backdrop[];
      
      
      
    } catch (error) {
      errorRequest = error as ResultErrorFilters
    }
  }

  const response = await fetch(url, options)

  const series_tv = await response.json() as TvSeriesTop 

  const serieTv_gendersId = series_tv.results.map(serie => serie.genre_ids)

  const gendersList = await getGendersSeriesList(ACCESS_TOKEN) as Genders
 
  const listIdWithGender = await getGendersSeries(serieTv_gendersId, gendersList) as MovieWithGenders

  const img = await Promise.all(series_tv.results.map((serie) => getPosterPath(ACCESS_TOKEN, serie.id, "tv")));
  
---

<div class="flex flex-col gap-4 pt-40">
  <div class="relative px-5 md:px-10 flex items-center flex-col xl:flex-row justify-between">
    <h1 class="text-white/50 font-Noto_Sans text-3xl xl:text-xl self-start font-light">{title}</h1>
    <div class="flex flex-grow w-full xl:w-fit xl:flex-grow-0 flex-wrap items-center pt-10 gap-10 justify-start lg:max-xl:justify-center xl:justify-start xl:pt-0">
      <Filters choose={choose}/>
    </div>
  </div>
  <div id="containerMovies" class="relative h-full mt-10">
    <div class="relative grid place-items-center grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-5 px-5 md:px-10 pb-20 overflow-hidden">
      {
        errorRequest?.statusCode === 404 || resultFilters == undefined
        ?
        series_tv.results.map((movie, index) =>(
          <ShowMovie
            id={movie.id}
            url_image={img[index]?.file_path}
            title={movie.name}
            widht={500}
            height={700}
            genders={listIdWithGender}
            rate={movie.vote_average}
            index={index}
            url="tv"
          />
        ))
        :
        resultFilters.results.map((movie, index) =>(
          <ShowMovie
            id={movie.id}
            url_image={imgMovieFilter[index]?.file_path}
            title={movie.name}
            widht={500}
            height={700}
            genders={listGenders}
            rate={movie.vote_average}
            index={index}
            url="tv"
          />
        ))
      }
    </div>
  </div>
  <Footer/>
</div>
