---
  import { getResultSearch } from '@/services/get_search'
  import ShowMovie from './ShowMovie.astro'
  import { getGendersMoviesList, getGendersSeriesList } from '@/services/get_genders'
  import type { Genders, MovieWithGenders } from '@/types/Genders'
  import { getGendersMovies, getGendersSeries } from '@/services/get_genders_list'
  import { getPosterPath } from '@/services/get_poster_img'
  import type { Movies } from '@/types/dataMovie'
  import type { SearchSeries } from '@/types/dataSearchSeries'
import Movie from './Movie.astro'


  interface Props {
    url: string
    title: string
    choose: string | null
  }

  const{ url, title, choose } = Astro.props

  const ACCESS_TOKEN = import.meta.env.SECRET_TOKEN_ACCESS;

  let resultSearchMovies: Movies | undefined;
  let resultSearchSeries: SearchSeries | undefined;

  let data: Movies | SearchSeries


  // const result = await getResultSearch(ACCESS_TOKEN,) as Movies;

  let listIdWithGender: MovieWithGenders


  if (choose === "movie") {
    resultSearchMovies = await getResultSearch(ACCESS_TOKEN, url, choose) as Movies
    data = resultSearchMovies
    const gendersList = await getGendersMoviesList(ACCESS_TOKEN) as Genders
    const movie_gendersId = resultSearchMovies.results.map(search => search.genre_ids)
    listIdWithGender = await getGendersMovies(movie_gendersId, gendersList) as MovieWithGenders;
  }else{
    resultSearchSeries = await getResultSearch(ACCESS_TOKEN, url, choose) as SearchSeries
    data = resultSearchSeries
    const gendersList = await getGendersSeriesList(ACCESS_TOKEN) as Genders
    const movie_gendersId = resultSearchSeries.results.map(search => search.genre_ids)
    listIdWithGender = await getGendersSeries(movie_gendersId, gendersList) as MovieWithGenders;
  }
  
  const img = await Promise.all(data.results.map((search) => getPosterPath(ACCESS_TOKEN, search.id, choose)));

  
  

---

<main class="relative w-full overflow-hidden pt-40">
  <div class="relative px-10 flex items-center flex-col xl:flex-row justify-between">
    <h1 class="text-white font-Libre_Franklin text-3xl text-center sm:text-left lg:max-xl:text-center xl:text-left md font-bold">{title}</h1>
    <div class="flex flex-wrap items-center pt-10 gap-10 justify-start lg:max-xl:justify-center xl:justify-start px-10 xl:pt-0">
      <!-- <Filters/> -->
    </div>
  </div>
  <div id="containerMovies" class="relative h-full mt-10">
    <div class="relative grid place-items-center grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-5 px-10 pb-20">
      {
        choose === "movie"
        ?
        resultSearchMovies?.results.map((movie, index) =>(
          <ShowMovie
            id={movie.id}
            url_image={img[index]?.file_path ?? ""}
            title={movie.title}
            widht={500}
            height={700}
            genders={listIdWithGender}
            rate={movie.vote_average}
            index={index}
            url='movie'
          />
        ))
        :
        resultSearchSeries?.results.map((movie, index) =>(
          <ShowMovie
            id={movie.id}
            url_image={img[index]?.file_path ?? ""}
            name={movie.name}
            widht={500}
            height={700}
            genders={listIdWithGender}
            rate={movie.vote_average}
            index={index}
            url='tv'
          />
        ))
      }
    </div>
  </div>
</main>


<style>
  
  #containerMovies::-webkit-scrollbar{
    width: 5px;
  }

  #containerMovies::-webkit-scrollbar-thumb{
    background-color: #003B07;
    border-radius: 10px;
  }

  #containerMovies::-webkit-scrollbar-track{
    background-color: #000105;
  }

</style>



