---
  import IconClaqueta from "@/icons/IconClaqueta.astro"
  import IconLanguage from "@/icons/IconLanguage.astro"
  import IconTime from "@/icons/IconTime.astro"
  import ButtonViewTrailer from "../react/ButtonViewTrailer"
  import type { Genre, ProductionCompany, Result, SpokenLanguage } from "@/types/dataIdMovieSelect"

  interface Props {
    id: number | undefined
    title: string | undefined
    genres?: Genre[]
    language?: SpokenLanguage[]
    overview?: string
    production_companies?: ProductionCompany[]
    date?: Date
    duration?: number
    tagline?: string
    video?: Result[]
    rate?: number
  }

  const {title, tagline, language, genres, date, rate, overview, duration, video, production_companies} = Astro.props


  let hour
  let minutes

  if (duration) {
    hour = Math.floor(duration / 60) 
    minutes =  Math.floor(duration % 60) 
  }


---


<div class="relative flex flex-col gap-5 px-5 md:px-10 xl:max-2xl:pr-0">
  <h1 class=`font-Ubuntu ${title !== undefined && title.length >= 20 ? 'text-[3rem] leading-[45px] md:text-7xl xl:text-6xl' : 'text-5xl sm:max-xl:text-7xl xl:text-7xl'} font-semibold text-white max-w-3xl m-0 uppercase`>{title}</h1>
  {
    tagline
     && 
    <div class="flex">
      <span class="text-zinc-400/50 font-bold font-Libre_Franklin text-xs ">{tagline}</span>
    </div>
  }
  <div class="flex flex-wrap items-center gap-4">
    <div class="flex flex-wrap max-w-sm items-center gap-2">
      <IconLanguage/>
      <div class="flex flex-wrap gap-2">
        {language?.map(lang =>
          <span class="text-white uppercase font-Noto_Sans font-light"> {lang.name}</span>
         )}
      </div>
    </div>
    <div class="flex flex-wrap gap-2">
      <IconClaqueta/>
      {genres?.map(gender => (<span class="text-white font-Noto_Sans font-light">{gender.name}</span>))}
    </div>
  </div>
  <div class="flex flex-col gap-1 py-1">
    <span class="text-white font-Noto_Sans font-light">Fecha de estreno: {date}</span>
    <span class="text-white font-Noto_Sans font-light">Rate: {rate?.toFixed(1).toString()}</span>
  </div>
  <div class="max-w-lg xl:max-2xl:max-w-xl">
    <p class="text-white font-Noto_Sans font-light line-clamp-5">{overview || "Lo siento. No se encontro alg√∫n resumen"}</p>
  </div>
  <div class="flex gap-2">
    <IconTime/>
    <span class="text-white font-Noto_Sans font-light">
      {hour}h {minutes?.toString().padStart(2,'0')} minutos
    </span>
  </div>
  <div class="flex">
    <ButtonViewTrailer client:visible/>
  </div>
</div>